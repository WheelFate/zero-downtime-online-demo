# .github/workflows/main.yml
# This file defines a GitHub Actions workflow.

name: Simulate Zero-Downtime Deployment # The name of our workflow, visible in the Actions tab

on:
  push:
    branches:
      - main # This workflow will automatically run every time code is pushed to the 'main' branch.

env:
  APP_NAME: zero-downtime-demo-app # A simple name for our simulated application within the workflow.

jobs:
  simulate-deployment: # Defines a single job named 'simulate-deployment'
    runs-on: ubuntu-latest # Specifies that this job will run on a fresh Ubuntu virtual machine provided by GitHub.

    steps:
      - name: Checkout code
        # This is a pre-built GitHub Action that downloads your repository's code
        # onto the virtual machine where the workflow is running.
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        # This action sets up Docker Buildx, which is a powerful toolkit for building Docker images.
        uses: docker/setup-buildx-action@v3

      - name: Generate unique APP_VERSION
        # This step creates a unique version tag for our application for this specific build.
        # It combines the current date/time with a short Git commit SHA.
        id: set_app_version # Gives this step an ID so we can reference its output
        run: echo "APP_VERSION=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}" >> $GITHUB_ENV
        # The '>> $GITHUB_ENV' part makes this APP_VERSION environment variable available to subsequent steps.

      - name: Build Docker image for new version
        # This step builds the Docker image defined by our Dockerfile.
        # For this simulation, we build it but don't push it to an external registry.
        uses: docker/build-push-action@v5
        with:
          context: . # The build context is the root of our repository (where Dockerfile is).
          push: false # Set to 'false' because we are not pushing to Docker Hub or any other registry.
          tags: ${{ env.APP_NAME }}:${{ env.APP_VERSION }} # Tags the image with our app name and unique version.
          load: true # 'load: true' loads the built image into the Docker daemon on the runner, making it available for immediate use.

      - name: Simulate Zero-Downtime Deployment Steps
        # This is the core step where we simulate the zero-downtime logic using Docker commands.
        run: |
          echo "--- Starting Simulated Zero-Downtime Deployment ---"
          echo "Deploying new version: ${{ env.APP_VERSION }}"

          # 1. Simulate starting the NEW application instance
          #    In a real zero-downtime scenario, the new version starts alongside the old.
          #    Here, we run it as a new Docker container.
          echo "1. Starting NEW application instance (${{ env.APP_NAME }}-new)..."
          # Stop and remove any previous container named '${{ env.APP_NAME }}-new' to ensure a clean start.
          docker stop "${{ env.APP_NAME }}-new" 2>/dev/null || true
          docker rm "${{ env.APP_NAME }}-new" 2>/dev/null || true
          # Run the new Docker image in detached mode (-d), giving it a specific name.
          # We pass the APP_VERSION as an environment variable to the container.
          docker run -d --name "${{ env.APP_NAME }}-new" \
                     -e "APP_VERSION=${{ env.APP_VERSION }}" \
                     ${{ env.APP_NAME }}:${{ env.APP_VERSION }}

          echo "   New instance started. Waiting for it to become healthy..."
          sleep 5 # Give the container a few seconds to fully start up.

          # 2. Simulate Health Check on the NEW instance
          #    This is crucial: we verify the new version is working before switching traffic.
          echo "2. Performing health check on NEW instance..."
          # *** FIX APPLIED HERE: Use 'docker exec' to run curl inside the container ***
          if docker exec "${{ env.APP_NAME }}-new" curl --fail http://localhost:5000/health; then
            echo "   Health check SUCCESS for NEW instance!"
          else
            echo "   Health check FAILED for NEW instance! Aborting deployment."
            exit 1 # If the health check fails, the workflow step will fail, stopping the deployment.
          fi

          # 3. Simulate Traffic Switch (the "zero-downtime" part)
          #    This is conceptual for a single runner. In a real setup, a load balancer
          #    would instantly switch traffic to the new, healthy instance.
          #    Here, we simulate by renaming Docker containers to reflect the "active" version.
          echo "3. Simulating Traffic Switch..."

          # Check if an "old" version is currently "live" (from a previous deployment).
          if docker ps -a --format '{{.Names}}' | grep -q "${{ env.APP_NAME }}-current"; then
            echo "   Renaming current running app (${{ env.APP_NAME }}-current) to old version (${{ env.APP_NAME }}-old)..."
            # Stop the currently "live" container and rename it to indicate it's now the "old" version.
            docker stop "${{ env.APP_NAME }}-current" 2>/dev/null || true
            docker rename "${{ env.APP_NAME }}-current" "${{ env.APP_NAME }}-old"
          else
            echo "   No existing 'current' version found. This is likely the first deployment."
          fi

          echo "   Renaming NEW instance (${{ env.APP_NAME }}-new) to CURRENT instance..."
          # Rename the newly deployed, healthy container to be the "current" (live) version.
          docker rename "${{ env.APP_NAME }}-new" "${{ env.APP_NAME }}-current"

          echo "   New version (${{ env.APP_VERSION }}) is now conceptually 'live'."

          # 4. Simulate Old Version Shutdown (after traffic has switched)
          #    Only after the new version is fully active and serving traffic,
          #    the old version is gracefully shut down and removed.
          echo "4. Stopping and removing OLD instance if it exists..."
          # Stop and remove the container that was just renamed to "old".
          docker stop "${{ env.APP_NAME }}-old" 2>/dev/null || true
          docker rm "${{ env.APP_NAME }}-old" 2>/dev/null || true
          echo "   Old instance removed."

          echo "--- Simulated Deployment Complete! ---"
          echo "You can now make another change to src/app.py (e.g., change APP_VERSION) and commit to see a new deployment."

      - name: Verify Current Version (Optional)
        # This step is just to demonstrate that the "current" container is indeed running
        # the new version within the GitHub Actions runner environment.
        run: |
          echo "Verifying the 'current' running version (in this simulation):"
          # *** FIX APPLIED HERE: Use 'docker exec' to run curl inside the container ***
          docker exec "${{ env.APP_NAME }}-current" curl http://localhost:5000/
